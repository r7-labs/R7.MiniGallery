@inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage<MiniGalleryViewModel>

@using System.Collections.Generic
@using DotNetNuke.Collections
@using DotNetNuke.Web.Mvc.Helpers
@using DotNetNuke.Entities.Icons
@using DotNetNuke.Web.Client.ClientResourceManagement
@using DotNetNuke.Framework
@using DotNetNuke.Framework.JavaScriptLibraries
@using DotNetNuke.Common
@using DotNetNuke.Common.Utilities
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using R7.MiniGallery
@using R7.MiniGallery.ViewModels
@using R7.MiniGallery.Lightboxes
@using R7.MiniGallery.React

@{
    JavaScript.RequestRegistration ("React");
    JavaScript.RequestRegistration ("ReactDOM");
    ServicesFramework.Instance.RequestAjaxScriptSupport ();
    ClientResourceManager.RegisterScript (Dnn.DnnPage, "~/DesktopModules/MVC/R7.MiniGallery/js/lib/minigallery.js");
    Model.Lightbox.Register (Dnn.DnnPage);
    ClientResourceManager.RegisterScript (Dnn.DnnPage, "~/DesktopModules/MVC/R7.MiniGallery/js/lib/module-loader.js");
    ClientResourceManager.RegisterStyleSheet (Dnn.DnnPage, "~/DesktopModules/MVC/R7.MiniGallery/css/style-" + Model.Settings.StyleSet.ToLowerInvariant () + ".css");
    ClientResourceManager.RegisterScript (Dnn.DnnPage, "~/DesktopModules/MVC/R7.MiniGallery/js/lib/Hello.js");

    if (Model.Images.Count == 0) {
        if (!Dnn.ModuleContext.IsEditable) {
            var containerControl = Globals.FindControlRecursiveDown (Dnn.DnnPage, "ctr" + Dnn.ModuleContext.ModuleId);
            containerControl.Visible = false;
        }
        else {
            <p class="dnnFormMessage dnnFormInfo">@(Dnn.LocalizeString ("NothingToDisplay.Text"))</p>
        }
    }
}

<div class="minigallery-root"
	data-lightbox-type="@(Model.Lightbox.GetType ().Name)"
    data-module-id="@Dnn.ModuleContext.ModuleId"
    data-is-editable="@(Dnn.ModuleContext.IsEditable.ToString ().ToLowerInvariant ())"
    data-edit-icon="@(IconController.IconURL ("Edit", "16X16", "Gray"))"
    data-resources="@Model.ClientResources"
	data-settings="@(JsonConvert.SerializeObject (Model.ClientSettings, Formatting.None, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver () }))"
	data-total-images="@Model.TotalImages"
    data-images="@(JsonConvert.SerializeObject (Model.Images, Formatting.None, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver () }))">
</div>
@Html.ReactWithInit("Hello", new {
    name = "John Doe"
})
